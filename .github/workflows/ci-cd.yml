name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      immediate_cleanup:
        description: "Trigger cleanup immediately"
        required: false
        default: "false"

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: digital-store/backend
  ECR_REPOSITORY_FRONTEND: digital-store/frontend
  IMAGE_TAG: ${{ github.sha }}

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Validate Workflow Files
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          for file in .github/workflows/*.yml; do
            gh workflow view "$file" >/dev/null
          done

  app-test:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Build and Test
        run: |
          cd application
          mvn test

  app-security:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: OWASP Dependency Check Backend
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        with:
          project: "Application Backend"
          path: "application"
          format: "HTML"
          args: "--failOnCVSS 7"
      - name: OWASP Dependency Check Frontend
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        with:
          project: "Application Frontend"
          path: "application/frontend"
          format: "HTML"
          args: "--failOnCVSS 7"
      - name: Build Backend Docker Image
        run: |
          cd application
          docker build -t backend:latest .
      - name: Build Frontend Docker Image
        run: |
          cd application/frontend
          docker build -t frontend:latest .

  security-checks:
    needs: [app-test, app-security]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run TFSec on Terraform
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform
        continue-on-error: true
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: "auto"
        continue-on-error: true
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
      - name: Scan backend image with Grype
        continue-on-error: true
        run: |
          docker build -t backend-temp:latest ./application
          grype backend-temp:latest --fail-on high

  deploy-infrastructure:
    name: Deploy Infrastructure with Terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: "1.5.0"

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve

  build-and-push:
    name: Build and Push Docker Images
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest ./application
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:latest

      - name: Build and push frontend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest ./application/frontend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:latest

  deploy-application:
    name: Deploy Application to EKS
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name digital-store-cluster --region ${{ env.AWS_REGION }}

      - name: Deploy application
        run: |
          cd terraform
          terraform apply -auto-approve

  validate-infra:
    needs: deploy-application
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name digital-store-cluster --region ${{ env.AWS_REGION }}

      - name: Verify application health via ALB
        run: |
          ALB_HOST=$(kubectl get ingress digital-store-alb -n default -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "ALB URL: http://$ALB_HOST"
          sleep 120
          curl --fail http://$ALB_HOST/api/health

      - name: Get Terraform Output for RDS Endpoint
        id: rds-endpoint
        run: |
          cd terraform
          terraform init
          RDS_ENDPOINT=$(terraform output -raw endpoint)
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV

      - name: Get DB password from SSM
        id: get-db-password
        run: |
          echo "DB_PASSWORD=$(aws ssm get-parameter --name \"/terraform/db_password\" --with-decryption --query Parameter.Value --output text)" >> $GITHUB_ENV

      - name: Verify RDS connectivity from cluster
        env:
          DB_USER: ${{ secrets.DB_USERNAME }}
          DB_PASS: ${{ env.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          RDS_ENDPOINT: ${{ env.RDS_ENDPOINT }}
        run: |
          POD=$(kubectl run tmp-psql --image=postgres:15 --restart=Never --command -- sleep 3600 -o name)
          kubectl exec $POD -- sh -c "apt-get update -qq && apt-get install -qq -y dnsutils netcat postgresql-client"
          kubectl exec $POD -- nslookup $RDS_ENDPOINT
          kubectl exec $POD -- nc -zv $RDS_ENDPOINT 5432
          kubectl exec $POD -- psql postgresql://$DB_USER:$DB_PASS@$RDS_ENDPOINT:5432/$DB_NAME -c '\\conninfo'
          kubectl delete $POD


