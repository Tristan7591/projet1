name: CI-CD-Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    steps:
      ######################################################
      # 1) Récupération du code
      ######################################################
      - name: Check out code
        uses: actions/checkout@v3

      ######################################################
      # 2) Configuration AWS
      ######################################################
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # À adapter

      ######################################################
      # 3) Compilation + Tests (JUnit + Mockito)
      ######################################################
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Maven clean test
        run: mvn clean test

      - name: Maven integration tests
        run: mvn verify -Pintegration-tests

      ######################################################
      # 4) Docker build & test local
      ######################################################
      - name: Build Docker image
        run: docker build -t mon-application .

      - name: Run container for quick test
        run: |
          docker run -d --name test-container -p 8080:8080 mon-application
          sleep 5
          curl -f http://localhost:8080/actuator/health
          docker stop test-container
          docker rm test-container

      ######################################################
      # 5) Terraform : EKS (subnet privé), RDS (subnet privé)
      ######################################################
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan

      - name: Terraform Apply
        run: terraform apply -auto-approve

      ######################################################
      # 6) Push image to ECR
      ######################################################
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag Docker image
        run: |
          docker tag mon-application:latest \
            ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/mon-application:latest

      - name: Push Docker image
        run: |
          docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/mon-application:latest

      ######################################################
      # 7) Déploiement Kubernetes (Ingress en public)
      ######################################################
      - name: Install kubectl
        uses: actions/setup-kubectl@v3
        with:
          version: "v1.25.0"

      - name: Update Kubeconfig
        run: |
          aws eks update-kubeconfig --name <EKS_CLUSTER_NAME> --region ${{ env.AWS_REGION }}

      - name: Apply Kubernetes Manifests
        run: |
          kubectl apply -f k8s/secret-postgres.yaml
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/service.yaml
          kubectl apply -f k8s/ingress.yaml
          kubectl rollout status deployment/mon-application
