name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # VALIDATION
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Validate Workflow Files
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          for file in .github/workflows/*.yml; do
            echo "Validating $file"
            gh workflow view "$file" >/dev/null
          done

  # APPLICATION TESTS
  app-test:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'
      - name: Build and Test
        run: |
          cd application
          mvn test

  # BUILD IMAGES (Nécessaire avant le scan Trivy)
  build-images:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build Backend Docker Image
        run: |
          cd application
          docker build -t backend:latest .
      - name: Build Frontend Docker Image
        run: |
          cd application/frontend
          docker build -t frontend:latest .

  # SCAN DE SÉCURITÉ (Trivy ne s'exécute qu'après le build)
  scan-security:
    needs: build-images
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: OWASP Dependency Check
        uses: jeremylong/DependencyCheck@v6.5.3
        with:
          project: "Application"
          scan: "application"
      - name: Run Trivy Scan Backend
        uses: aquasecurity/trivy-action@latest
        with:
          image-ref: "backend:latest"
          severity: "HIGH,CRITICAL"
          ignore-unfixed: true
      - name: Run Trivy Scan Frontend
        uses: aquasecurity/trivy-action@latest
        with:
          image-ref: "frontend:latest"
          severity: "HIGH,CRITICAL"
          ignore-unfixed: true

  # PUSH TO ECR (Nécessite un scan réussi)
  push-to-ecr:
    needs: [app-test, scan-security]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Push Backend Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: digital-store/backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd application
          docker tag backend:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      - name: Push Frontend Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: digital-store/frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd application/frontend
          docker tag frontend:latest $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  # INFRASTRUCTURE DEPLOYMENT
  terraform-deploy:
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.0
      - name: Terraform Init & Apply
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve

  # KUBERNETES DEPLOYMENT
  eks-deploy:
    needs: terraform-deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION || 'us-east-1' }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      - name: Update Kubernetes manifests & Deploy
        env:
          IMAGE_TAG: ${{ github.sha }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          sed -i "s|image:.*digital-store/backend:.*|image: $ECR_REGISTRY/digital-store/backend:$IMAGE_TAG|g" k8s/backend/deployment.yaml
          sed -i "s|image:.*digital-store/frontend:.*|image: $ECR_REGISTRY/digital-store/frontend:$IMAGE_TAG|g" k8s/frontend/deployment.yaml
          kubectl apply -f k8s/backend/deployment.yaml
          kubectl apply -f k8s/frontend/deployment.yaml
          kubectl rollout status deployment/digital-store-backend
          kubectl rollout status deployment/digital-store-frontend
