name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      immediate_cleanup:
        description: "Trigger cleanup immediately"
        required: false
        default: "false"

env:
  AWS_REGION: us-east-1

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Validate Workflow Files
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          for file in .github/workflows/*.yml; do
            gh workflow view "$file" >/dev/null
          done

  app-test:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
      - name: Build and Test
        run: |
          cd application
          mvn test

  app-security:
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: OWASP Dependency Check Backend
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        with:
          project: "Application Backend"
          path: "application"
          format: "HTML"
          args: "--failOnCVSS 7"
      - name: OWASP Dependency Check Frontend
        uses: dependency-check/Dependency-Check_Action@main
        env:
          JAVA_HOME: /opt/jdk
        with:
          project: "Application Frontend"
          path: "application/frontend"
          format: "HTML"
          args: "--failOnCVSS 7"
      - name: Build Backend Docker Image
        run: |
          cd application
          docker build -t backend:latest .
      - name: Build Frontend Docker Image
        run: |
          cd application/frontend
          docker build -t frontend:latest .

  security-checks:
    needs: [app-test, app-security]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run TFSec on Terraform
        uses: aquasecurity/tfsec-action@v1.0.0
        with:
          working_directory: terraform
        continue-on-error: true
      - name: Run Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: "auto"
        continue-on-error: true
      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        with:
          scan-dir: .
          redact: true
          verbose: true

      - name: Install Grype
        run: |
          curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
      - name: Scan backend image with Grype
        continue-on-error: true
        run: |
          docker build -t backend-temp:latest ./application
          grype backend-temp:latest --fail-on high

  push-to-ecr:
    needs: security-checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      - name: Push Backend Image
        env:
          ECR_REGISTRY: 797394900921.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: backend-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd application
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
      - name: Push Frontend Image
        env:
          ECR_REGISTRY: 797394900921.dkr.ecr.us-east-1.amazonaws.com
          ECR_REPOSITORY: frontend-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd application/frontend
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

  terraform-deploy:
    needs: push-to-ecr
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.0
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Get db_password from AWS SSM
        id: get-db-password
        run: |
          DB_PASSWORD=$(aws ssm get-parameter \
            --name "/terraform/db_password" \
            --with-decryption \
            --query "Parameter.Value" \
            --output text)
          echo "TF_VAR_db_password=$DB_PASSWORD" >> $GITHUB_ENV
      - name: Terraform Init & Apply
        run: |
          cd terraform
          terraform init
          terraform apply -auto-approve

  eks-deploy:
    needs: terraform-deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name digital-store-cluster --region ${{ env.AWS_REGION }}
      - name: Deploy to EKS
        env:
          IMAGE_TAG: ${{ github.sha }}
          ECR_REGISTRY: 797394900921.dkr.ecr.us-east-1.amazonaws.com
        run: |
          sed -i "s|image:.*digital-store/backend:.*|image: $ECR_REGISTRY/backend-repo:$IMAGE_TAG|g" k8s/backend/deployment.yaml
          sed -i "s|image:.*digital-store/frontend:.*|image: $ECR_REGISTRY/frontend-repo:$IMAGE_TAG|g" k8s/frontend/deployment.yaml
          kubectl apply -f k8s

  validate-infra:
    needs: eks-deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name digital-store-cluster --region ${{ env.AWS_REGION }}

      - name: Verify application health via ALB
        run: |
          ALB_HOST=$(kubectl get ingress digital-store-alb -n default -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          echo "ALB URL: http://$ALB_HOST"
          sleep 120
          curl --fail http://$ALB_HOST/api/health

      - name: Get Terraform Output for RDS Endpoint
        id: rds-endpoint
        run: |
          cd terraform
          terraform init
          RDS_ENDPOINT=$(terraform output -raw endpoint)
          echo "RDS_ENDPOINT=$RDS_ENDPOINT" >> $GITHUB_ENV

      - name: Get DB password from SSM
        id: get-db-password
        run: |
          echo "DB_PASSWORD=$(aws ssm get-parameter --name \"/terraform/db_password\" --with-decryption --query Parameter.Value --output text)" >> $GITHUB_ENV

      - name: Verify RDS connectivity from cluster
        env:
          DB_USER: ${{ secrets.DB_USERNAME }}
          DB_PASS: ${{ env.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          RDS_ENDPOINT: ${{ env.RDS_ENDPOINT }}
        run: |
          POD=$(kubectl run tmp-psql --image=postgres:15 --restart=Never --command -- sleep 3600 -o name)
          kubectl exec $POD -- sh -c "apt-get update -qq && apt-get install -qq -y dnsutils netcat postgresql-client"
          kubectl exec $POD -- nslookup $RDS_ENDPOINT
          kubectl exec $POD -- nc -zv $RDS_ENDPOINT 5432
          kubectl exec $POD -- psql postgresql://$DB_USER:$DB_PASS@$RDS_ENDPOINT:5432/$DB_NAME -c '\\conninfo'
          kubectl delete $POD

  terraform-cleanup:
    if: ${{ failure() || github.event_name == 'workflow_dispatch' || always() }}
    needs: [terraform-deploy, eks-deploy, validate-infra]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v3
      - name: Wait 15 minutes unless override
        if: ${{ github.event.inputs.immediate_cleanup != 'true' }}
        run: |
          echo "Waiting 15 minutes before cleanup unless skipped..."
          sleep 900
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Cleanup AWS resources manually
        run: |
          aws eks delete-nodegroup --cluster-name digital-store-cluster --nodegroup-name digital-store-node-group || true
          aws eks delete-cluster --name digital-store-cluster || true
          aws rds delete-db-instance --db-instance-identifier digital-store-db --skip-final-snapshot || true
          aws ecr delete-repository --repository-name backend-repo --force || true
          aws ecr delete-repository --repository-name frontend-repo --force || true
          # Optionnel: nettoyage des SG, r√¥les IAM, politiques, ALB
      - name: Destroy Terraform-managed resources
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.5.0
      - run: |
          cd terraform
          terraform init
          terraform destroy -auto-approve